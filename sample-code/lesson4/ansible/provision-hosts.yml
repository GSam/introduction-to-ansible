---
- name: Preflight to set up machine specific variables
  hosts: "{{ env_name }}"
  gather_facts: false
  tasks:


- name: Provision a set of hosts in the Catalyst Cloud
  hosts: localhost
  gather_facts: false
  vars:
    # optional suffix to namespace resources
    suffix: ""
    host_set: "{{ groups['mycluster'] | unique | list }}"
    # change if required or override at runtime using --extra-vars

    security_groups: "{{ host_set | map('extract', hostvars, 'security_groups') | sum(start=main_security_groups) | unique | list }}"

    security_group_names: "{{ security_groups | map(attribute='group') | unique | list }}"

  tasks:
    - name: Connect to Catalyst Cloud
      os_auth:

    - name: Create keypair
      os_keypair:
        name: "{{ keypair_name }}"
        public_key: "{{ ssh_public_key }}"

    - name: Create Network
      os_network:
        name: "{{ network_name }}"
        state: present

    - name: Create subnet
      os_subnet:
        name: "{{ subnet_name }}"
        network_name: "{{ network_name }}"
        state: present
        cidr: "{{ subnet_cidr }}"
        allocation_pool_start: "{{ subnet_dhcp_start }}"
        allocation_pool_end: "{{ subnet_dhcp_end }}"
        ip_version: 4
        dns_nameservers: "{{ default_nameservers }}"

    - name: Create router
      os_router:
        state: present
        name: "{{ router_name }}"
        network: "{{ public_net_name }}"
        interfaces:
          - "{{ subnet_name }}"

    - name: Create security groups
      os_security_group:
        state: present
        name: "{{ item }}"
      with_items: "{{ security_group_names }}"

    - name: Add rules for security group
      os_security_group_rule:
        state: present
        security_group: "{{ item.group }}"
        protocol: "{{ item.proto | default('tcp') }}"
        port_range_min: "{{ omit if item.port == 'any' else item.port }}"
        port_range_max: "{{ omit if item.port == 'any' else item.port_end | default(item.port) }}"
        remote_ip_prefix: "{{ item.remote_ip_prefix | default(omit) }}"
        remote_group: "{{ item.remote_group | default(omit) }}"
      with_items: "{{ security_groups }}"


    - name: Create web servers
      os_server:
        state: present
        name: "{{ hostvars[item].ansible_host }}"
        image: "{{ default_os_image }}"
        key_name: "{{ keypair_name  }}"
        flavor: "{{ default_flavor }}"
        nics:
          - net-name: "{{ subnet_name }}"
        security_groups: "default,{{ security_groups | join(',') }}"
      with_items: "{{ host_set }}"

    - name: Assign floating ips
      os_floating_ip:
        state: present
        reuse: yes
        wait: true
        server: "{{ item }}"
      register: floating_ip_info
      with_items:
        - "{{ host_set }}"

    - name: Append floating ip to host info
      add_host:
        name: "{{ item.item.name }}"
        ansible_host: "{{ item.floating_ip.floating_ip_address }}"
        fixed_ip: "{{ item.floating_ip.fixed_ip_address }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
        ansible_python_interpreter: /usr/bin/python
      with_items: "{{ floating_ip_info.results }}"

    - wait_for:
        host: "{{ hostvars[item].ansible_host }}"
        port: 22
      with_items: "{{ host_set }}"
      tags: wait_for

    - name: Remove floating ips from known_hosts
      known_hosts:
        name: "{{ item.floating_ip.floating_ip_address }}"
        state: absent
      with_items: "{{ floating_ip_info.results }}"


- name: Basic host setup
  hosts: "mycluster"
  become: true
  gather_facts: false
  vars: 
    host_set: "{{ groups['mycluster']  }}"
  tags:
    - basic
  pre_tasks:
    - name: Remove floating ip from known hosts
      delegate_to: localhost
      known_hosts:
        name: "{{ ansible_host }}"
        state: absent

    - name: "Add {{ inventory_hostname }} to local ~/.ssh/config"
      delegate_to: localhost
      tags: local-changes
      blockinfile:
        dest: "{{ lookup('env', 'HOME') }}/.ssh/config"
        insertbefore: BOF
        block: |
          Host {{ inventory_hostname }}
              User {{ ssh_user }}
              StrictHostKeyChecking no
          Host {{ ansible_host }}
              Hostname {{ inventory_hostname }}
              User {{ ssh_user }}
              StrictHostKeyChecking no
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ inventory_hostname }}"

    - name: "Add {{ inventory_hostname }} to /etc/hosts"
      delegate_to: localhost
      tags: local-changes
      become: yes
      blockinfile:
        dest: /etc/hosts
        insertafter: EOF
        block: |
          {{ ansible_host }} {{ inventory_hostname }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK for {{ inventory_hostname }}"


    - debug:
        var: ssh_user

    - name: Update apt cache
      raw: apt update -y

    - include: roles/common/tasks/install-python.yml

